# =====CircleCIのバージョンを指定する
# 2019/07/08現在は2 or 2.0 or 2.1を指定可能
version: 2.0

# =====jobs:
#   ジョブを指定する、複数指定可能だが、ジョブが1つだけの場合は「build」にする必要がある
jobs:

  # -----build:
  #   ジョブ名を指定する
  build:

    # CircleCIではDockerの使用が推奨されているため、Dockerの設定を行う
    docker:
      # - image:
      # Docckerに搭載するイメージを指定する

      # [Ruby]
      - image: circleci/ruby:2.4.2-jessie-node
        # 環境変数の定義
        environment:
          BUNDLE_JOBS: 3
          BUNDLE_RETRY: 3
          BUNDLE_PATH: vendor/bundle
          BUNDLER_VERSION: 2.0.1
          RAILS_ENV: test

    # -----steps:
    #   ジョブで実行する処理を定義する
    steps:
      # ソースコードをGitHubからCircleCIの作業ディレクトリにコピーする
      - checkout

      - run:
          name: Bundlerのバージョンを出力
          command: bundle -v

      # Bundleキャッシュを復元する
      - restore_cache:
          keys:
            - rails-demo-bundler-v2-{{ checksum "Gemfile.lock"}}
            - rails-demo-bundle-v2-

      - run:
          name: bundle install実行
          command: bundle check --path=vendor/bundle || bundle install --path vendor/bundle --clean --jobs 4 --retry 3

      # bundle install実行後のキャッシュを保存する(次回実行時、前述のrestore_cacheで使用する)
      - save_cache:
            key:
              rails-demo-bundler-v2-{{ checksum "Gemfile.lock"}}
            paths:
              - vendor/bundle

      # RSpecを実行する
      - run:
          name: RSpecを並列実行(実行速度を上げるため)
          command: |
            bundle exec rspec --profile 10 \ # 処理の遅いテストを10個サンプリングする
                      # CircleCI用のRSPecのテスト結果出力用フォーマッター(要Gemfileへのg定義追加)
                      # --outで出力する時に使用する
                      --format RspecJunitFormatter \
                      # テスト結果の出力先
                      --out test_results/rspec.xml \
                      # 標準出力のフォーマット設定
                      --format progress \
                      $(circleci tests glob "spec/**/*_spec.rb" | circle tests split --split-by=timings)

      # テスト結果を保存する
      - store_test_results:
            path:
              test_results
